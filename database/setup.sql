DROP TABLE IF EXISTS RESERVATIONS;
DROP TABLE IF EXISTS PETS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS ROLES;

CREATE TABLE ROLES (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL UNIQUE CHECK (NAME IN ('ADMIN', 'VET', 'CLIENT')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE USERS (
    UID SERIAL PRIMARY KEY, 
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(60) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    ROLE_ID INT NOT NULL DEFAULT 3,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) 
);

CREATE TABLE PETS (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    SPECIES VARCHAR(50) NOT NULL,
    BREED VARCHAR(50),
    OWNER INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (OWNER) REFERENCES USERS(UID) 
);

CREATE TABLE RESERVATIONS (
    ID SERIAL PRIMARY KEY,
    PET INT NOT NULL,
    VET INT NOT NULL,
    RESERVATION_DATE DATE NOT NULL,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (VET) REFERENCES USERS(UID) 
);
/* 
-- Trigger para actualizar UPDATED_AT
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_roles_updated_at
BEFORE UPDATE ON ROLES
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON USERS
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_pets_updated_at
BEFORE UPDATE ON PETS
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_reservations_updated_at
BEFORE UPDATE ON RESERVATIONS
FOR EACH ROW
EXECUTE FUNCTION update_timestamp(); */

INSERT INTO ROLES (NAME) VALUES 
    ('ADMIN'),
    ('VET'),
    ('CLIENT');
